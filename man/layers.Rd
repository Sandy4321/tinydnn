% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layers.R
\name{layer_fully_connected}
\alias{ave_pool}
\alias{conv}
\alias{fc}
\alias{layer_average_pooling}
\alias{layer_convolutional}
\alias{layer_fully_connected}
\alias{layer_max_pooling}
\alias{layers}
\alias{max_pool}
\title{Layers to Build Deep Neural Networks}
\usage{
layer_fully_connected(in_dim, out_dim, has_bias = TRUE,
  activation = "sigmoid")

fc(in_dim, out_dim, has_bias = TRUE, activation = "sigmoid")

layer_convolutional(in_width, in_height, window_width, window_height,
  in_channels, out_channels, pad_type = c("valid", "same"), has_bias = TRUE,
  stride_x = 1L, stride_y = 1L, activation = "sigmoid")

conv(in_width, in_height, window_width, window_height, in_channels,
  out_channels, pad_type = c("valid", "same"), has_bias = TRUE,
  stride_x = 1L, stride_y = 1L, activation = "sigmoid")

layer_average_pooling(in_width, in_height, in_channels, pool_size_x,
  pool_size_y = ifelse(in_height == 1, 1, pool_size_x),
  stride_x = pool_size_x, stride_y = pool_size_y, pad_type = c("valid",
  "same"), activation = "sigmoid")

ave_pool(in_width, in_height, in_channels, pool_size_x,
  pool_size_y = ifelse(in_height == 1, 1, pool_size_x),
  stride_x = pool_size_x, stride_y = pool_size_y, pad_type = c("valid",
  "same"), activation = "sigmoid")

layer_max_pooling(in_width, in_height, in_channels, pool_size_x,
  pool_size_y = ifelse(in_height == 1, 1, pool_size_x),
  stride_x = pool_size_x, stride_y = pool_size_y, pad_type = c("valid",
  "same"), activation = "sigmoid")

max_pool(in_width, in_height, in_channels, pool_size_x,
  pool_size_y = ifelse(in_height == 1, 1, pool_size_x),
  stride_x = pool_size_x, stride_y = pool_size_y, pad_type = c("valid",
  "same"), activation = "sigmoid")
}
\arguments{
\item{in_dim}{Number of elements in the input}

\item{out_dim}{Number of elements in the output}

\item{has_bias}{Whether to include the bias element}

\item{activation}{Activation function applied to this layer. See section
\strong{Activation Functions} for details.}

\item{in_width}{Input image width}

\item{in_height}{Input image height}

\item{window_width}{Window width of convolution}

\item{window_height}{Window height of convolution}

\item{in_channels}{Input image channels (depth)}

\item{out_channels}{Output image channels (depth)}

\item{pad_type}{Rounding strategy}

\item{stride_x}{The horizontal interval at which to apply the filters}

\item{stride_y}{The vertical interval at which to apply the filters}

\item{pool_size_x}{The factor by which to downscale in horizontal direction}

\item{pool_size_y}{The factor by which to downscale in vertical direction}
}
\description{
Various layers that can be combined to build a deep neural network.
}
\section{List of Layers}{

Currently the following layers are supported:
\itemize{
  \item Fully-connected layer: \code{layer_fully_connected()}, or \code{fc()} for short
  \item Convolutoinal layer: \code{layer_convolutional()}, \code{conv()}
  \item Average-pooling layer: \code{layer_average_pooling()}, \code{ave_pool()}
  \item Max-pooling layer: \code{layer_max_pooling()}, \code{max_pool()}
}
More types of layers are to be added.
}

\section{Activation Functions}{

Currently the following activation functions are supported:

\itemize{
  \item identity
  \item sigmoid
  \item relu
  \item leaky_relu
  \item elu
  \item softmax
  \item tan_h
  \item tan_hp1m2
}
}

